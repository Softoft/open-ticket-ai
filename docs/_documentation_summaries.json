{"architecture.md": "Explore the technical architecture of Open Ticket AI, detailing its modular data processing pipeline, key components, and use of Hugging Face models for intelligent ticket classification and routing.", "developer-information.md": "Developer guide for the ATC Community Edition, an on-premise ticket classification tool. Learn to configure the system with YAML, run it from the CLI, and extend its architecture using custom Python components.", "get-started.md": "Learn how to quickly install Open Ticket AI using Docker. This getting started guide provides easy setup instructions for integrating with your OTRS, OTOBO, or Znuny helpdesk via Web Services.", "index.md": "Save time and money with Open Ticket AI. Automate support ticket classification with our secure, on-premise AI solution for OTOBO. Features easy Docker installation, a powerful REST API, and seamless integration. Get started today.", "api\\main.md": "Discover the OpenTicketAI core engine (`ce`) documentation. Learn how the `App` class in `app.py` handles job scheduling and orchestration, while `main.py` provides the CLI entry point for running the system, managing configuration, and setting logging levels.", "blog\\ai-in-open-source-ticketsystems.md": "Discover how to supercharge open-source help desks like osTicket and Zammad with AI. This guide details how to automate ticket classification and routing to build a powerful, self-hosted support system that rivals costly enterprise SaaS platforms, saving time and increasing efficiency.", "blog\\ai-in-ticketsystems.md": "Discover how AI transforms ticket management. Learn to automate ticket prioritization, categorization, and routing to streamline support workflows and boost customer satisfaction.", "blog\\ai_classifiers_metrics.md": "Master AI ticket classification with this guide to evaluation. Learn why accuracy is misleading for imbalanced data and discover the essential metrics that truly matter, including precision, recall, F1-score, and multi-label strategies.", "blog\\automatic_ticket_labeling.md": "Save time and cost labeling thousands of tickets. Learn how to use GPT for semi-automated, zero-shot pre-labeling and tools like Label Studio for efficient human review. Includes Python examples.", "blog\\fine-tuning-an-ai-model-with-own-ticket-data.md": "Learn to fine-tune an AI model with your own ticket data for accurate, automated ticket classification. This guide provides step-by-step instructions for preparing datasets and training models using Hugging Face Transformers or an on-premise REST API.", "concepts\\community-edition-overview.md": "Boost support efficiency with ATC Community Edition, a free, on-premise tool for automated ticket classification. Installs easily with Docker and integrates seamlessly with OTOBO to improve accuracy and ensure data security.", "concepts\\key-features.md": "Discover Open Ticket AI, the on-premise AI solution for automated ticket classification. Streamline support by automatically predicting queues and priorities, with multi-language support and easy integration via a REST API, all while maintaining full data privacy and control.", "concepts\\mvp-technical-overview.md": "A technical overview of the Automated Ticket Classification (ATC) MVP, detailing its core architecture, use of Hugging Face models for queue and priority classification, and specific integration steps for the OTOBO ticket system.", "concepts\\pipeline-architecture.md": "Discover the Open Ticket AI architecture, a modular pipeline that uses transformer models to automatically process and classify support tickets by queue and priority, streamlining help desk workflows.", "guide\\hardware-requirements.md": "Ensure peak performance for Open Ticket AI with the right hardware. This guide details CPU, NVIDIA GPU, and RAM requirements for any ticket volume and deployment.", "guide\\installation-guide.md": "Easily install Open Ticket AI with our official step-by-step guide. Learn to clone the repository, create your configuration, and launch the app with Docker Compose.", "guide\\quickstart-guide.md": "Learn the simple Docker installation for ATC and use its REST API to train a model for automated support ticket classification.", "guide\\running-classifier.md": "Automate ticket classification with Open Ticket AI and Docker Compose. Learn to run queue and priority workers to intelligently route and prioritize support tickets.", "guide\\training-models.md": "Learn to train and fine-tune custom AI models for Open Ticket AI. This guide covers essential steps from data collection and cleaning to hyperparameter tuning and model evaluation to improve ticket queue and priority classification accuracy.", "api\\core\\ce_core_config.md": "Discover the core configuration system of the Open Ticket AI project. This guide details the Python data models (`config_models.py`) and validation logic (`config_validator.py`) that define and manage all application settings.", "api\\core\\di.md": "Explore the open_ticket_ai dependency injection system. Learn how the Registry, Container, and create_registry function establish a flexible architecture for managing core services like the OTOBOAdapter and HFAIInferenceService.", "api\\core\\mixins.md": "Explore the core Python mixins for creating flexible registry systems. This guide covers `RegistryInstanceConfig` for defining unique instance configurations and `RegistryProvidableInstance`, the essential base class for objects managed by a provider.", "api\\core\\util.md": "Explore the documentation for OpenTicketAI's core configuration utilities. Learn how to generate a `config.schema.json` from Pydantic models for validation and editor autocompletion, and how to pretty-print configurations as syntax-highlighted YAML for enhanced readability.", "api\\run\\managers.md": "Official documentation for the Orchestrator class in open_ticket_ai. Learn how this core component manages and executes ticket processing pipelines, handles dependency injection, and configures scheduled pipeline runs.", "api\\run\\pipeline.md": "Learn how to build and run modular data processing pipelines in Python using this framework. This guide covers the `Pipeline` class for executing a sequence of stages, the `Pipe` interface for creating custom processing components, and the `PipelineContext` object for managing shared state to create powerful, sequential data workflows.", "api\\run\\pipes.md": "Explore the Python pipeline components for AI-powered ticket processing within `open_ticket_ai`. This documentation details the classes responsible for fetching ticket data (`BasicTicketFetcher`), preparing text content from subjects and bodies (`SubjectBodyPreparer`), running AI model inference with a Hugging Face service (`HFAIInferenceService`), and applying updates back to the ticket system (`GenericTicketUpdater`).", "api\\run\\ticket_system_integration.md": "Official documentation for Python ticket system integration. Learn to use the `TicketSystemAdapter` abstract base class, its asynchronous methods like `update_ticket` and `find_tickets`, and the concrete OTOBO adapter to build robust, scalable ticketing solutions."}