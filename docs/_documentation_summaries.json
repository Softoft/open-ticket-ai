{
  "architecture.md": "Explore the technical architecture of Open Ticket AI. Learn how its modular data pipeline and Hugging Face models enable intelligent ticket classification and routing.",
  "developer-information.md": "Developer guide for the ATC Community Edition, an on-premise ticket classification tool. Learn to configure the system with YAML, run it from the CLI, and extend its architecture using custom Python components.",
  "get-started.md": "Learn how to quickly install Open Ticket AI using Docker. This guide provides easy setup instructions for integrating with your OTRS, OTOBO, or Znuny helpdesk via Web Services.",
  "index.md": "Save time and money with Open Ticket AI, the secure, on-premise AI solution for automating OTOBO support ticket classification. Features easy Docker installation, a powerful REST API, and seamless integration to boost your helpdesk efficiency.",
  "api\\main.md": "Explore the documentation for the OpenTicketAI core engine. This guide details the main `App` class in `app.py`, which orchestrates configuration validation and job scheduling. It also covers `main.py`, the command-line interface (CLI) entry point that initializes the application, configures logging, and launches the system using dependency injection.",
  "blog\\ai-in-open-source-ticketsystems.md": "Discover how to bridge the intelligence gap in open-source help desks like osTicket and Zammad. This guide explores using AI tools like Open Ticket AI to automate ticket classification, routing, and workflows, creating a powerful, cost-effective alternative to enterprise SaaS.",
  "blog\\ai-in-ticketsystems.md": "Discover how AI transforms ticket management. Learn to automate ticket prioritization, categorization, and routing to streamline support workflows and boost customer satisfaction.",
  "blog\\ai_classifiers_metrics.md": "Master AI ticket classification with this guide to evaluation. Learn why accuracy is misleading for imbalanced data and discover the essential metrics that truly matter, including precision, recall, F1-score, and multi-label strategies.",
  "blog\\automatic_ticket_labeling.md": "Save time and cost labeling thousands of tickets. Learn how to use GPT for semi-automated, zero-shot pre-labeling and tools like Label Studio for efficient human review. Includes Python examples.",
  "blog\\fine-tuning-an-ai-model-with-own-ticket-data.md": "Learn to fine-tune an AI model with your own ticket data for accurate, automated ticket classification. This guide provides step-by-step instructions for preparing datasets and training models using Hugging Face Transformers or an on-premise REST API.",
  "concepts\\community-edition-overview.md": "Boost support efficiency with ATC Community Edition, a free, on-premise tool for automated ticket classification. Installs easily with Docker and integrates seamlessly with OTOBO to improve accuracy and ensure data security.",
  "concepts\\key-features.md": "Explore the features of Open Ticket AI, an on-premise solution for automated ticket classification. Automatically predict queues and priorities, integrate via a REST API, and maintain full data privacy with multi-language support.",
  "concepts\\mvp-technical-overview.md": "A technical overview of the Automated Ticket Classification (ATC) MVP, detailing its architecture, use of Hugging Face models for queue and priority classification, and specific integration steps for the OTOBO ticket system.",
  "concepts\\pipeline-architecture.md": "Discover the Open Ticket AI architecture, a modular pipeline that uses transformer models to automatically process and classify support tickets by queue and priority, streamlining help desk workflows.",
  "guide\\hardware-requirements.md": "Ensure peak performance for Open Ticket AI with the right hardware. This guide details CPU, NVIDIA GPU, and RAM requirements for any ticket volume and deployment.",
  "guide\\installation-guide.md": "Install Open Ticket AI with our official guide. Learn to clone the repository, create a configuration file, and launch the application using Docker Compose.",
  "guide\\otobo-znuny-otrs-integration.md": "Learn how to integrate Python applications with OTOBO, Znuny, and OTRS using our asynchronous client library. This guide provides step-by-step instructions and code examples for managing helpdesk tickets via the REST API, including creating, searching, updating, and retrieving ticket history.",
  "guide\\quickstart-guide.md": "Discover how to easily install ATC using Docker and utilize its REST API for automated support ticket classification. This guide provides step-by-step instructions on sending training data, initiating model training, and classifying new tickets to streamline your support workflow.",
  "guide\\running-classifier.md": "Learn how to use Open Ticket AI with Docker Compose to automate ticket classification. This guide explains how to run queue and priority workers to intelligently route and prioritize support tickets based on AI predictions.",
  "guide\\training-models.md": "Learn to train and fine-tune custom AI models for Open Ticket AI. This guide covers essential steps from data collection and cleaning to hyperparameter tuning and model evaluation to improve ticket queue and priority classification accuracy.",
  "api\\core\\ce_core_config.md": "Explore the core configuration system for the Open Ticket AI project. This documentation details the `config_models.py` module for structuring application settings and `config_validator.py` for robust validation, ensuring a stable and reliable deployment.",
  "api\\core\\di.md": "Discover the Dependency Injection (DI) architecture of Open Ticket AI. This documentation explains how to create and use a Python class registry to manage core services like OTOBO integration, data preparation, and local Hugging Face AI inference.",
  "api\\core\\mixins.md": "Official documentation for the `Providable` base class in `open_ticket_ai.ce.core.mixins`. Learn how this class facilitates creating registry-managed objects, handling configuration, and implementing provider registration with methods like `get_provider_key`.",
  "api\\core\\util.md": "Official documentation for OpenTicketAI's core Python utility modules. Learn how to generate a JSON schema for configuration validation with Pydantic and pretty-print settings in a syntax-highlighted YAML format using the `rich` library. This guide details essential tools for managing and visualizing system configuration.",
  "api\\run\\managers.md": "Discover the Open Ticket AI Orchestrator, the core component responsible for managing and executing automated ticket processing pipelines. This documentation explains how the Orchestrator class uses dependency injection to build pipelines, process individual tickets on-demand, and configure scheduled runs for continuous workflow automation.",
  "api\\run\\pipeline.md": "This documentation outlines a modular Python framework for building sequential data processing pipelines. It details core components such as `Pipeline` for managing execution flow, the `Pipe` interface for creating individual processing stages, and `PipelineContext` for passing state and data between pipes. The system includes robust features for status tracking, error handling, and controlled pipeline termination, enabling the creation of resilient and maintainable data workflows.",
  "api\\run\\pipes.md": "Review the documentation for Python data models in `pipe_implementations`. This guide details the `TextAIModelInput` class, used for structuring inputs for AI text model inference, and the `EmptyDataModel`, a versatile Pydantic placeholder for pipeline operations.",
  "api\\run\\ticket_system_integration.md": "Explore the documentation for the Python `ticket_system_integration` module. Learn how to use the `TicketSystemAdapter` abstract base class to create, update, find, and manage tickets across different systems. This guide covers the unified data models like `UnifiedTicket` and `UnifiedNote`, enabling a system-agnostic approach to ticket management and integration."
}