{
  "architecture.md": "Explore the technical architecture of Open Ticket AI. Learn how its modular data pipeline, dependency injection, and Hugging Face models enable intelligent ticket classification and routing for help desk systems like OTOBO.",
  "developer-information.md": "Developer guide for the ATC Community Edition, an on-premise ticket classification tool. Learn to configure the system with YAML, run it from the CLI, and extend its architecture using custom Python components, pipes, and ticket system adapters.",
  "get-started.md": "Learn how to quickly install and run Open Ticket AI using Docker Compose. This guide provides easy setup instructions for integrating with your OTRS, OTOBO, or Znuny helpdesk via Web Services.",
  "index.md": "Boost helpdesk efficiency with Open Ticket AI, the secure, on-premise solution for automating OTOBO support ticket classification. Save time and money with easy Docker installation, a powerful REST API, and seamless integration.",
  "api\\main.md": "Official documentation for the Open Ticket AI command-line interface (CLI) entry point. This guide covers main.py, detailing how to configure logging levels and launch the application.",
  "blog\\ai-in-open-source-ticketsystems.md": "Discover how to bridge the intelligence gap in open-source help desks like osTicket and Zammad. This guide explores using AI tools like Open Ticket AI to automate ticket classification, routing, and workflows, creating a powerful, cost-effective alternative to enterprise SaaS.",
  "blog\\ai-in-ticketsystems.md": "Discover how AI transforms ticket management. Learn to automate ticket prioritization, categorization, and routing to streamline support workflows and boost customer satisfaction.",
  "blog\\ai_classifiers_metrics.md": "Master AI ticket classification with this guide to evaluation. Learn why accuracy is misleading for imbalanced data and discover the essential metrics that truly matter, including precision, recall, F1-score, and multi-label strategies.",
  "blog\\automatic_ticket_labeling.md": "Save time and cost labeling thousands of tickets. Learn how to use GPT for semi-automated, zero-shot pre-labeling and tools like Label Studio for efficient human review. Includes Python examples.",
  "blog\\fine-tuning-an-ai-model-with-own-ticket-data.md": "Learn to fine-tune an AI model with your own ticket data for accurate, automated ticket classification. This guide provides step-by-step instructions for preparing datasets and training models using Hugging Face Transformers or an on-premise REST API.",
  "blog\\integrating-freshdesk-open-ticket-ai.md": "Learn how to integrate the on-premise Open Ticket AI (OTAI) with Freshdesk for powerful, automated ticket classification. This document details creating a custom Python `TicketSystemAdapter` to connect OTAI's AI models with the Freshdesk REST API. Automate ticket triage by updating Freshdesk tickets with AI-predicted categories and priorities, embedding intelligent classification directly into your support workflow.",
  "blog\\integrating-zammad-open-ticket-ai.md": "Learn how to integrate OpenTicketAI with Zammad for on-premise, automated ticket classification and routing. This guide details creating a ZammadAdapter using the REST API to fetch tickets, run them through an AI pipeline, and automatically update their queue, priority, and notes.",
  "blog\\integrating-zendesk-open-ticket-ai.md": "Learn to integrate Zendesk with Open Ticket AI for automated ticket classification. This guide shows developers how to build a custom Python adapter to auto-triage tickets by priority and tags using the Zendesk REST API, improving support efficiency.",
  "concepts\\community-edition-overview.md": "Boost support efficiency with ATC Community Edition, a free, on-premise tool for automated ticket classification. Installs easily with Docker and integrates seamlessly with OTOBO to improve accuracy and ensure data security.",
  "concepts\\key-features.md": "Explore the features of Open Ticket AI, an on-premise solution for automated ticket classification. Automatically predict queues and priorities, integrate via a REST API, and maintain full data privacy with multi-language support.",
  "concepts\\mvp-technical-overview.md": "Discover the technical architecture of the Automated Ticket Classification (ATC) MVP, detailing its use of Hugging Face models for automatic queue and priority classification and the specific steps for integration with the OTOBO ticket system.",
  "concepts\\pipeline-architecture.md": "Explore the Open Ticket AI architecture, a modular pipeline that leverages transformer models to automatically classify support tickets by queue and priority, streamlining help desk workflows and integrating with ticket systems via a REST API.",
  "guide\\hardware-requirements.md": "Find the official hardware recommendations for Open Ticket AI. This guide details the ideal CPU, GPU, and RAM requirements to ensure peak performance for any deployment scenario.",
  "guide\\installation-guide.md": "Learn how to install Open Ticket AI using Docker Compose with this step-by-step guide. Follow instructions to clone the repository, create a configuration, and deploy the application.",
  "guide\\otobo-znuny-otrs-integration.md": "Learn to integrate Python applications with OTOBO, Znuny, and OTRS using an asynchronous client library. This guide provides step-by-step instructions and code examples for managing helpdesk tickets via the REST API, including creating, searching, updating, and retrieving ticket history.",
  "guide\\quickstart-guide.md": "Quickly install and run Open Ticket AI with Docker Compose. This step-by-step guide shows you how to configure and start the default workers for automated ticket processing.",
  "guide\\running-classifier.md": "Learn how to use Open Ticket AI with Docker Compose to automate ticket classification. This guide explains how to run queue and priority workers to intelligently route and prioritize support tickets based on AI predictions.",
  "guide\\training-models.md": "Learn how to train and fine-tune custom models for Open Ticket AI. This guide covers the external workflow: exporting data, training a model, and updating your config.",
  "api\\core\\ce_core_config.md": "Learn about the core configuration system for the open_ticket_ai project. This documentation covers the Python modules for defining configuration models (`config_models.py`) and implementing robust settings validation (`config_validator.py`) to ensure application stability and integrity.",
  "api\\core\\di.md": "Explore the Python dependency injection (DI) system at the core of Open Ticket AI. This documentation covers the creation of a central registry that configures and provides key services, including an OTOBO adapter, data preparers, and a local Hugging Face AI inference service for automated ticket processing.",
  "api\\core\\mixins.md": "Explore the documentation for the `Providable` base class in Python, a core mixin from the `open_ticket_ai` project. This class serves as a foundation for objects managed by a registry, providing essential functionality for configuration storage, provider key generation (`get_provider_key`), and descriptive information. Learn how to create registry-providable instances with built-in configuration and console handling for extensible systems.",
  "api\\core\\util.md": "Official documentation for OpenTicketAI's core utility modules. Learn how to generate a `config.schema.json` for configuration validation and autocompletion, and discover other Python utilities for managing project settings.",
  "api\\run\\managers.md": "Explore the OpenTicketAI `Orchestrator` class, a core component for automating ticket processing workflows. This Python module manages the complete lifecycle of pipelines, including instantiation via dependency injection, individual ticket processing, and scheduled execution for continuous automation.",
  "api\\run\\pipeline.md": "Discover a modular Python pipeline framework for building robust data processing workflows. This documentation covers the core components: the `Pipeline` orchestrator, individual `Pipe` stages, and the `PipelineContext` for state management. Learn to implement sequential processing, handle errors gracefully, manage execution status (RUNNING, SUCCESS, FAILED, STOPPED), and ensure type safety with Pydantic.",
  "api\\run\\pipes.md": "Explore the documentation for Python modules in the `open_ticket_ai` project, detailing the implementation of AI model inference pipelines. Learn about the `TextAIModelInput` class for structuring text data for Hugging Face models and the `EmptyDataModel` Pydantic placeholder. This guide covers the essential data models and service structures for running local and cloud-based Hugging Face inference tasks.",
  "api\\run\\ticket_system_integration.md": "Discover our Python library for seamless ticket system integration. This documentation details the `TicketSystemAdapter`, an abstract base class for building custom connectors, and provides a ready-to-use `OTOBOAdapter`. Learn to manage tickets across different platforms using unified models like `UnifiedTicket`, `UnifiedNote`, and `SearchCriteria` for creating, updating, and finding support tickets."
}