import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"Entwicklerinformationen","description":"Entwicklerinformationen für die ATC Community Edition","frontmatter":{"title":"Entwicklerinformationen","description":"Entwicklerinformationen für die ATC Community Edition"},"headers":[],"relativePath":"de/developer-information.md","filePath":"de/developer-information.md"}');
const _sfc_main = { name: "de/developer-information.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="entwicklerinformationen-fur-die-atc-community-edition" tabindex="-1">Entwicklerinformationen für die ATC Community Edition <a class="header-anchor" href="#entwicklerinformationen-fur-die-atc-community-edition" aria-label="Permalink to &quot;Entwicklerinformationen für die ATC Community Edition&quot;">​</a></h1><h2 id="uberblick" tabindex="-1">Überblick <a class="header-anchor" href="#uberblick" aria-label="Permalink to &quot;Überblick&quot;">​</a></h2><p>Die ATC Community Edition ist eine On-Premise-Lösung zur automatisierten Klassifizierung von Support-Tickets. Die aktuelle MVP-Version wird über eine YAML-Konfigurationsdatei gesteuert und per CLI gestartet. Es gibt keine REST API zum Hochladen von Trainingsdaten oder zum Auslösen eines Trainingslaufs.</p><h2 id="softwarearchitektur" tabindex="-1">Softwarearchitektur <a class="header-anchor" href="#softwarearchitektur" aria-label="Permalink to &quot;Softwarearchitektur&quot;">​</a></h2><p>Die Anwendung besteht im Wesentlichen aus den folgenden Paketen:</p><ul><li><strong>core</strong> – Basisklassen, Konfigurationsmodelle und Hilfsfunktionen.</li><li><strong>run</strong> – enthält die Pipeline für die Ticket-Klassifizierung.</li><li><strong>ticket_system_integration</strong> – Adapter für verschiedene Ticketsysteme.</li><li><strong>main.py</strong> – CLI-Einstiegspunkt, der den Scheduler und den Orchestrator startet.</li></ul><p>Der Orchestrator führt konfigurierbare <code>AttributePredictors</code> aus, die sich aus <code>DataFetcher</code>, <code>DataPreparer</code>, <code>AIInferenceService</code> und <code>Modifier</code> zusammensetzen. Alle Komponenten werden in der <code>config.yml</code> definiert und beim Programmstart validiert.</p><p>Ein Beispielbefehl zum Starten der Anwendung:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">python</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> -m</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> open_ticket_ai.src.ce.main</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> start</span></span></code></pre></div><h2 id="training-eigener-modelle" tabindex="-1">Training eigener Modelle <a class="header-anchor" href="#training-eigener-modelle" aria-label="Permalink to &quot;Training eigener Modelle&quot;">​</a></h2><p>Ein direktes Training über die Anwendung ist im MVP nicht vorgesehen. Vortrainierte Modelle können in der Konfiguration angegeben und verwendet werden. Wenn ein Modell angepasst oder neu erstellt werden muss, muss dies außerhalb der Anwendung geschehen.</p><h2 id="erweiterung" tabindex="-1">Erweiterung <a class="header-anchor" href="#erweiterung" aria-label="Permalink to &quot;Erweiterung&quot;">​</a></h2><p>Benutzerdefinierte Fetcher, Preparer, KI-Services oder Modifier können als Python-Klassen implementiert und über die Konfiguration registriert werden. Dank Dependency Injection können neue Komponenten einfach integriert werden.</p><h2 id="zusammenfassung" tabindex="-1">Zusammenfassung <a class="header-anchor" href="#zusammenfassung" aria-label="Permalink to &quot;Zusammenfassung&quot;">​</a></h2><p>Die ATC Community Edition bietet in ihrer MVP-Version einen lokal ausgeführten Workflow zur automatischen Ticket-Klassifizierung. Alle Einstellungen werden über YAML-Dateien verwaltet; es ist keine REST API verfügbar. Für das Training müssen externe Prozesse oder Skripte verwendet werden.</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("de/developer-information.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const developerInformation = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  developerInformation as default
};
