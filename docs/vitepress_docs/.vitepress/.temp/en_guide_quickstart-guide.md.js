import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"Installation and Usage of ATC","description":"Install ATC on your server and use the API for automated classification of support tickets.","frontmatter":{"title":"Installation and Usage of ATC","description":"Install ATC on your server and use the API for automated classification of support tickets."},"headers":[],"relativePath":"en/guide/quickstart-guide.md","filePath":"en/guide/quickstart-guide.md"}');
const _sfc_main = { name: "en/guide/quickstart-guide.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><hr><h1 id="installation-of-atc" tabindex="-1">Installation of ATC <a class="header-anchor" href="#installation-of-atc" aria-label="Permalink to &quot;Installation of ATC&quot;">​</a></h1><p>ATC can be easily installed on your server using Docker. Follow the steps below to perform the installation:</p><h2 id="step-1-install-docker" tabindex="-1">Step 1: Install Docker <a class="header-anchor" href="#step-1-install-docker" aria-label="Permalink to &quot;Step 1: Install Docker&quot;">​</a></h2><p>First, you need to install Docker on your server. Run the following commands to install Docker:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">sudo</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> apt-get</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> update</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">sudo</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> apt-get</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> install</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> docker-ce</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> docker-ce-cli</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> containerd.io</span></span></code></pre></div><h2 id="step-2-run-the-atc-container" tabindex="-1">Step 2: Run the ATC Container <a class="header-anchor" href="#step-2-run-the-atc-container" aria-label="Permalink to &quot;Step 2: Run the ATC Container&quot;">​</a></h2><p>After Docker is installed, you can run the ATC container. Use the following command to start the container:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">docker</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> run</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> -d</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> -p</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> 8080:80</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> your-docker-repo/atc:latest</span></span></code></pre></div><p>This command pulls the latest ATC Docker image from your repository and starts it on port 8080.</p><h1 id="using-the-atc-api" tabindex="-1">Using the ATC API <a class="header-anchor" href="#using-the-atc-api" aria-label="Permalink to &quot;Using the ATC API&quot;">​</a></h1><p>After installation, you have HTTP REST access to the ATC API. Here are some basic commands to use the API:</p><h2 id="sending-training-data" tabindex="-1">Sending Training Data <a class="header-anchor" href="#sending-training-data" aria-label="Permalink to &quot;Sending Training Data&quot;">​</a></h2><p>To send training data or a CSV file to the ATC REST API, use the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">curl</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> -X</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> POST</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> http://your-server:8080/api/train</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> \\</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">     -H</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;Content-Type: text/csv&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> \\</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">     --data-binary</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> @yourfile.csv</span></span></code></pre></div><p>This command sends the file <code>yourfile.csv</code> to the API for use in training.</p><h2 id="starting-training" tabindex="-1">Starting Training <a class="header-anchor" href="#starting-training" aria-label="Permalink to &quot;Starting Training&quot;">​</a></h2><p>To start the model training, use this command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">curl</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> -X</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> POST</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> http://your-server:8080/api/start-training</span></span></code></pre></div><p>This command initiates the training process based on the previously sent data.</p><h2 id="classifying-tickets" tabindex="-1">Classifying Tickets <a class="header-anchor" href="#classifying-tickets" aria-label="Permalink to &quot;Classifying Tickets&quot;">​</a></h2><p>After successful training, you can send ticket data to the API for classification and receive the corresponding labels:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">curl</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> -X</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> POST</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> http://your-server:8080/api/classify</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> \\</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">     -H</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &quot;Content-Type: application/json&quot;</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> \\</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">     -d</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;{&quot;ticket_data&quot;: &quot;Your ticket content&quot;}&#39;</span></span></code></pre></div><p>This command sends the ticket content for classification and returns the classification labels.</p><h1 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h1><p>With these steps, you can install ATC on your server and use the basic API functions. ATC offers a powerful, flexible solution for automated support ticket classification that is easy to install and use.</p><p>This section describes the installation of ATC and the basic API commands in detail. You can adapt and extend it to include additional information or specific instructions.</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("en/guide/quickstart-guide.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const quickstartGuide = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  quickstartGuide as default
};
