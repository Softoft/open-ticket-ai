import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"Documentation for **/ce/core/util/**/*.py","description":"","frontmatter":{},"headers":[],"relativePath":"en/api/core/util.md","filePath":"en/api/core/util.md"}');
const _sfc_main = { name: "en/api/core/util.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="documentation-for-ce-core-util-py" tabindex="-1">Documentation for <code>**/ce/core/util/**/*.py</code> <a class="header-anchor" href="#documentation-for-ce-core-util-py" aria-label="Permalink to &quot;Documentation for \`**/ce/core/util/**/*.py\`&quot;">​</a></h1><h2 id="module-open-ticket-ai-src-ce-core-util-create-json-config-schema-py" tabindex="-1">Module: <code>open_ticket_ai\\src\\ce\\core\\util\\create_json_config_schema.py</code> <a class="header-anchor" href="#module-open-ticket-ai-src-ce-core-util-create-json-config-schema-py" aria-label="Permalink to &quot;Module: \`open_ticket_ai\\src\\ce\\core\\util\\create_json_config_schema.py\`&quot;">​</a></h2><p>Module for generating the JSON schema of the OpenTicketAI configuration. This module defines the <code>RootConfig</code> model, which is a wrapper around the main configuration model <code>OpenTicketAIConfig</code>. The purpose of this wrapper is to facilitate the generation of a JSON schema that describes the entire configuration structure.</p><p>When this module is run as a script, it will:</p><ol><li>Generate the JSON schema for the <code>RootConfig</code> model.</li><li>Write the schema to a file named <code>config.schema.json</code> in the project&#39;s root directory.</li></ol><p>The generated schema file can be used for validating configuration files or for providing configuration autocompletion and documentation in editors.</p><h3 id="class-rootconfig" tabindex="-1"><span style="${ssrRenderStyle({})}">class</span> <code>RootConfig</code> <a class="header-anchor" href="#class-rootconfig" aria-label="Permalink to &quot;&lt;span style=&#39;text-info&#39;&gt;class&lt;/span&gt; \`RootConfig\`&quot;">​</a></h3><p>Wrapper model used for schema generation. This class serves as a container for the main configuration model of the OpenTicketAI system. It is designed to be used for generating JSON schema representations of the configuration.</p><p><strong>Parameters:</strong></p><ul><li><strong><code>open_ticket_ai</code></strong> (<code>OpenTicketAIConfig</code>) - The main configuration object containing all settings and parameters for the OpenTicketAI system.</li></ul><hr><h2 id="module-open-ticket-ai-src-ce-core-util-path-util-py" tabindex="-1">Module: <code>open_ticket_ai\\src\\ce\\core\\util\\path_util.py</code> <a class="header-anchor" href="#module-open-ticket-ai-src-ce-core-util-path-util-py" aria-label="Permalink to &quot;Module: \`open_ticket_ai\\src\\ce\\core\\util\\path_util.py\`&quot;">​</a></h2><hr><h2 id="module-open-ticket-ai-src-ce-core-util-pretty-print-config-py" tabindex="-1">Module: <code>open_ticket_ai\\src\\ce\\core\\util\\pretty_print_config.py</code> <a class="header-anchor" href="#module-open-ticket-ai-src-ce-core-util-pretty-print-config-py" aria-label="Permalink to &quot;Module: \`open_ticket_ai\\src\\ce\\core\\util\\pretty_print_config.py\`&quot;">​</a></h2><p>Module for pretty printing configuration objects. This module provides functionality to display Pydantic configuration models in a nicely formatted and syntax highlighted way using the <code>rich</code> library. It converts Pydantic models to YAML format and applies syntax highlighting for improved readability.</p><p>Features:</p><ul><li>Converts Pydantic <code>BaseModel</code> instances to dictionaries</li><li>Serializes configuration data to YAML format</li><li>Applies YAML syntax highlighting using <code>rich</code></li><li>Prints highlighted output to console</li></ul><h3 id="def-pretty-print-config-config-basemodel-console-console" tabindex="-1"><span class="text-warning">def</span> <code>pretty_print_config(config: BaseModel, console: Console)</code> <a class="header-anchor" href="#def-pretty-print-config-config-basemodel-console-console" aria-label="Permalink to &quot;&lt;span class=&#39;text-warning&#39;&gt;def&lt;/span&gt; \`pretty_print_config(config: BaseModel, console: Console)\`&quot;">​</a></h3><p>Pretty print a pydantic model using <code>rich</code>. This function converts a Pydantic <code>BaseModel</code> to a dictionary, serializes it to YAML, and prints it to the console using <code>rich</code>&#39;s syntax highlighting. The output is formatted with YAML syntax highlighting for improved readability.</p><p>The process involves: 1. Converting the Pydantic model to a dictionary using <code>model_dump()</code> 2. Serializing the dictionary to a YAML string 3. Creating a rich <code>Syntax</code> object with YAML highlighting 4. Printing the highlighted YAML to the console</p><p>Note that this function bypasses standard logging and outputs directly to the console using <code>rich</code>&#39;s printing capabilities for optimal formatting.</p><p><strong>Parameters:</strong></p><ul><li><strong><code>config</code></strong> (<code>BaseModel</code>) - The Pydantic model configuration to display.</li><li><strong><code>console</code></strong> (<code>Console</code>) - The rich console instance for output rendering.</li></ul><hr></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("en/api/core/util.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const util = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  util as default
};
