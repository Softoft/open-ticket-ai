import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"Developer Information","description":"Developer information for the ATC Community Edition","frontmatter":{"title":"Developer Information","description":"Developer information for the ATC Community Edition"},"headers":[],"relativePath":"en/developer-information.md","filePath":"en/developer-information.md"}');
const _sfc_main = { name: "en/developer-information.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="developer-information-for-the-atc-community-edition" tabindex="-1">Developer Information for the ATC Community Edition <a class="header-anchor" href="#developer-information-for-the-atc-community-edition" aria-label="Permalink to &quot;Developer Information for the ATC Community Edition&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The ATC Community Edition is an on-premise solution for automated classification of support tickets. The current MVP version is controlled via a YAML configuration file and started via CLI. There is no REST API for uploading training data or triggering a training run.</p><h2 id="software-architecture" tabindex="-1">Software Architecture <a class="header-anchor" href="#software-architecture" aria-label="Permalink to &quot;Software Architecture&quot;">​</a></h2><p>The application essentially consists of the following packages:</p><ul><li><strong>core</strong> – base classes, configuration models, and helper functions.</li><li><strong>run</strong> – contains the pipeline for ticket classification.</li><li><strong>ticket_system_integration</strong> – adapters for different ticket systems.</li><li><strong>main.py</strong> – CLI entry point that starts the scheduler and the orchestrator.</li></ul><p>The orchestrator executes configurable <code>AttributePredictors</code>, which are composed of <code>DataFetcher</code>, <code>DataPreparer</code>, <code>AIInferenceService</code>, and <code>Modifier</code>. All components are defined in <code>config.yml</code> and validated at program startup.</p><p>An example command to start the application:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">python</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> -m</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> open_ticket_ai.src.ce.main</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> start</span></span></code></pre></div><h2 id="training-custom-models" tabindex="-1">Training Custom Models <a class="header-anchor" href="#training-custom-models" aria-label="Permalink to &quot;Training Custom Models&quot;">​</a></h2><p>Direct training through the application is not provided in the MVP. Pre-trained models can be specified and used in the configuration. If a model needs to be adjusted or newly created, this must be done outside the application.</p><h2 id="extension" tabindex="-1">Extension <a class="header-anchor" href="#extension" aria-label="Permalink to &quot;Extension&quot;">​</a></h2><p>Custom fetchers, preparers, AI services, or modifiers can be implemented as Python classes and registered via the configuration. Thanks to dependency injection, new components can be easily integrated.</p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>The ATC Community Edition offers a locally executed workflow for automatic ticket classification in its MVP version. All settings are managed via YAML files; no REST API is available. External processes or scripts must be used for training.</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("en/developer-information.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const developerInformation = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  developerInformation as default
};
