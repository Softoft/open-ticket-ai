import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"Dokumentation für **/ce/core/util/**/*.py","description":"","frontmatter":{},"headers":[],"relativePath":"de/api/core/util.md","filePath":"de/api/core/util.md"}');
const _sfc_main = { name: "de/api/core/util.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="dokumentation-fur-ce-core-util-py" tabindex="-1">Dokumentation für <code>**/ce/core/util/**/*.py</code> <a class="header-anchor" href="#dokumentation-fur-ce-core-util-py" aria-label="Permalink to &quot;Dokumentation für \`**/ce/core/util/**/*.py\`&quot;">​</a></h1><h2 id="modul-open-ticket-ai-src-ce-core-util-create-json-config-schema-py" tabindex="-1">Modul: <code>open_ticket_ai\\src\\ce\\core\\util\\create_json_config_schema.py</code> <a class="header-anchor" href="#modul-open-ticket-ai-src-ce-core-util-create-json-config-schema-py" aria-label="Permalink to &quot;Modul: \`open_ticket_ai\\src\\ce\\core\\util\\create_json_config_schema.py\`&quot;">​</a></h2><p>Modul zur Generierung des JSON-Schemas der OpenTicketAI-Konfiguration. Dieses Modul definiert das <code>RootConfig</code>-<code>model</code>, welches ein Wrapper um das Hauptkonfigurationsmodell <code>OpenTicketAIConfig</code> ist. Der Zweck dieses Wrappers ist es, die Erstellung eines JSON-Schemas zu erleichtern, das die gesamte Konfigurationsstruktur beschreibt.</p><p>Wenn dieses Modul als Skript ausgeführt wird, wird es:</p><ol><li>Das JSON-Schema für das <code>RootConfig</code>-<code>model</code> generieren.</li><li>Das Schema in eine Datei namens <code>config.schema.json</code> im Stammverzeichnis des Projekts schreiben.</li></ol><p>Die generierte Schemadatei kann verwendet werden, um Konfigurationsdateien zu validieren oder um Autovervollständigung und Dokumentation für die Konfiguration in Editoren bereitzustellen.</p><h3 id="class-rootconfig" tabindex="-1"><span style="${ssrRenderStyle({})}">class</span> <code>RootConfig</code> <a class="header-anchor" href="#class-rootconfig" aria-label="Permalink to &quot;&lt;span style=&#39;text-info&#39;&gt;class&lt;/span&gt; \`RootConfig\`&quot;">​</a></h3><p>Wrapper-<code>model</code>, das für die Schema-Generierung verwendet wird. Diese <code>class</code> dient als Container für das Hauptkonfigurationsmodell des OpenTicketAI-Systems. Sie ist dafür konzipiert, JSON-Schema-Darstellungen der Konfiguration zu generieren.</p><p><strong>Parameter:</strong></p><ul><li><strong><code>open_ticket_ai</code></strong> (<code>OpenTicketAIConfig</code>) - Das Hauptkonfigurationsobjekt, das alle Einstellungen und Parameter für das OpenTicketAI-System enthält.</li></ul><hr><h2 id="modul-open-ticket-ai-src-ce-core-util-path-util-py" tabindex="-1">Modul: <code>open_ticket_ai\\src\\ce\\core\\util\\path_util.py</code> <a class="header-anchor" href="#modul-open-ticket-ai-src-ce-core-util-path-util-py" aria-label="Permalink to &quot;Modul: \`open_ticket_ai\\src\\ce\\core\\util\\path_util.py\`&quot;">​</a></h2><hr><h2 id="modul-open-ticket-ai-src-ce-core-util-pretty-print-config-py" tabindex="-1">Modul: <code>open_ticket_ai\\src\\ce\\core\\util\\pretty_print_config.py</code> <a class="header-anchor" href="#modul-open-ticket-ai-src-ce-core-util-pretty-print-config-py" aria-label="Permalink to &quot;Modul: \`open_ticket_ai\\src\\ce\\core\\util\\pretty_print_config.py\`&quot;">​</a></h2><p>Modul zur formatierten Ausgabe (<code>pretty printing</code>) von Konfigurationsobjekten. Dieses Modul bietet Funktionalität, um Pydantic-Konfigurationsmodelle mithilfe der <code>rich</code>-Bibliothek schön formatiert und mit Syntaxhervorhebung darzustellen. Es konvertiert Pydantic-Modelle in das YAML-Format und wendet zur besseren Lesbarkeit eine Syntaxhervorhebung an.</p><p>Funktionen:</p><ul><li>Konvertiert Pydantic <code>BaseModel</code>-Instanzen in Dictionaries</li><li>Serialisiert Konfigurationsdaten in das YAML-Format</li><li>Wendet YAML-Syntaxhervorhebung mit <code>rich</code> an</li><li>Gibt die hervorgehobene Ausgabe auf der Konsole aus</li></ul><h3 id="def-pretty-print-config-config-basemodel-console-console" tabindex="-1"><span class="text-warning">def</span> <code>pretty_print_config(config: BaseModel, console: Console)</code> <a class="header-anchor" href="#def-pretty-print-config-config-basemodel-console-console" aria-label="Permalink to &quot;&lt;span class=&#39;text-warning&#39;&gt;def&lt;/span&gt; \`pretty_print_config(config: BaseModel, console: Console)\`&quot;">​</a></h3><p>Formatierte Ausgabe (<code>pretty print</code>) eines Pydantic-<code>model</code>s mithilfe von <code>rich</code>. Diese Funktion konvertiert ein Pydantic <code>BaseModel</code> in ein Dictionary, serialisiert es in YAML und gibt es mithilfe der Syntaxhervorhebung von <code>rich</code> auf der Konsole aus. Die Ausgabe wird zur besseren Lesbarkeit mit YAML-Syntaxhervorhebung formatiert.</p><p>Der Prozess umfasst: 1. Konvertieren des Pydantic-<code>model</code>s in ein Dictionary mit <code>model_dump()</code> 2. Serialisieren des Dictionaries in einen YAML-String 3. Erstellen eines <code>rich</code> <code>Syntax</code>-Objekts mit YAML-Hervorhebung 4. Ausgeben des hervorgehobenen YAMLs auf der Konsole</p><p>Beachten Sie, dass diese Funktion das Standard-Logging umgeht und für eine optimale Formatierung direkt über die Ausgabefunktionen von <code>rich</code> auf der Konsole ausgibt.</p><p><strong>Parameter:</strong></p><ul><li><strong><code>config</code></strong> (<code>BaseModel</code>) - Die anzuzeigende Pydantic-<code>model</code>-Konfiguration.</li><li><strong><code>console</code></strong> (<code>Console</code>) - Die <code>rich</code>-Konsoleninstanz für die Darstellung der Ausgabe.</li></ul><hr></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("de/api/core/util.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const util = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  util as default
};
