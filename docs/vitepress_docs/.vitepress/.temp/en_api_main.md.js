import { resolveComponent, useSSRContext } from "vue";
import { ssrRenderAttrs, ssrRenderStyle, ssrRenderComponent } from "vue/server-renderer";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"Documentation for **/ce/*.py","description":"","frontmatter":{},"headers":[],"relativePath":"en/api/main.md","filePath":"en/api/main.md"}');
const _sfc_main = { name: "en/api/main.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  const _component_Badge = resolveComponent("Badge");
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="documentation-for-ce-py" tabindex="-1">Documentation for <code>**/ce/*.py</code> <a class="header-anchor" href="#documentation-for-ce-py" aria-label="Permalink to &quot;Documentation for \`**/ce/*.py\`&quot;">​</a></h1><h2 id="module-open-ticket-ai-src-ce-app-py" tabindex="-1">Module: <code>open_ticket_ai\\src\\ce\\app.py</code> <a class="header-anchor" href="#module-open-ticket-ai-src-ce-app-py" aria-label="Permalink to &quot;Module: \`open_ticket_ai\\src\\ce\\app.py\`&quot;">​</a></h2><p>Main application module for OpenTicketAI. This module contains the <code>App</code> class which serves as the primary entry point for the OpenTicketAI system. It orchestrates configuration validation, job scheduling, and continuous execution of scheduled tasks.</p><h3 id="class-app" tabindex="-1"><span style="${ssrRenderStyle({})}">class</span> <code>App</code> <a class="header-anchor" href="#class-app" aria-label="Permalink to &quot;&lt;span style=&#39;text-info&#39;&gt;class&lt;/span&gt; \`App\`&quot;">​</a></h3><p>Main application entry point for the OpenTicketAI system. This class initializes and runs the core application components including:</p><ul><li>Configuration management</li><li>Configuration validation</li><li>Job orchestration and scheduling</li></ul><p>The application follows a scheduled execution model where jobs are run at predefined intervals.</p><p><strong>Parameters:</strong></p><ul><li><strong><code>config</code></strong> () - Loaded application configuration.</li><li><strong><code>validator</code></strong> () - Configuration validator instance.</li><li><strong><code>orchestrator</code></strong> () - Job orchestration manager.</li></ul><details class="details custom-block"><summary>#### `);
  _push(ssrRenderComponent(_component_Badge, {
    type: "info",
    text: "method"
  }, null, _parent));
  _push(` <span class="text-warning">def</span> <code>__init__(self, config: OpenTicketAIConfig, validator: OpenTicketAIConfigValidator, orchestrator: Orchestrator)</code></summary><p>Initialize the application with dependencies.</p><p><strong>Parameters:</strong></p><ul><li><strong><code>config</code></strong> () - Loaded configuration for the application containing all necessary parameters and settings.</li><li><strong><code>validator</code></strong> () - Validator instance used to check the integrity and correctness of the configuration.</li><li><strong><code>orchestrator</code></strong> () - Orchestrator instance responsible for setting up and managing scheduled jobs and attribute predictors.</li></ul></details><details class="details custom-block"><summary>#### `);
  _push(ssrRenderComponent(_component_Badge, {
    type: "info",
    text: "method"
  }, null, _parent));
  _push(` <span class="text-warning">def</span> <code>run(self)</code></summary><p>Main execution method for the application. Performs the following operations:</p><ol><li>Validates the application configuration</li><li>Sets up scheduled jobs using the orchestrator</li><li>Enters an infinite loop to execute pending scheduled tasks</li></ol><p>The method first validates the configuration registry. If validation fails, an error is logged and the application proceeds to setup schedules without valid configuration (which may cause runtime errors). On successful validation, a success message is printed.</p><p>After setup, the method enters a continuous loop that:</p><ul><li>Checks for pending scheduled jobs every second</li><li>Executes any pending jobs found</li></ul></details><hr><h2 id="module-open-ticket-ai-src-ce-main-py" tabindex="-1">Module: <code>open_ticket_ai\\src\\ce\\main.py</code> <a class="header-anchor" href="#module-open-ticket-ai-src-ce-main-py" aria-label="Permalink to &quot;Module: \`open_ticket_ai\\src\\ce\\main.py\`&quot;">​</a></h2><p>Open Ticket AI CLI entry point. This module provides the command-line interface for the Open Ticket AI application. It configures logging levels and launches the main application.</p><h3 id="def-main-verbose-bool-debug-bool" tabindex="-1"><span class="text-warning">def</span> <code>main(verbose: bool, debug: bool)</code> <a class="header-anchor" href="#def-main-verbose-bool-debug-bool" aria-label="Permalink to &quot;&lt;span class=&#39;text-warning&#39;&gt;def&lt;/span&gt; \`main(verbose: bool, debug: bool)\`&quot;">​</a></h3><p>Configure logging based on CLI options. This function sets the logging level for the application based on the provided command-line flags. It supports two levels of verbosity:</p><ul><li><code>--verbose</code> for INFO level logging</li><li><code>--debug</code> for DEBUG level logging</li></ul><p>If no flags are provided, the default logging level is WARNING. The function also configures log formatting and suppresses noisy libraries (e.g., urllib3).</p><p><strong>Parameters:</strong></p><ul><li><strong><code>verbose</code></strong> (<code>bool</code>) - Enable INFO-level logging when True.</li><li><strong><code>debug</code></strong> (<code>bool</code>) - Enable DEBUG-level logging when True.</li></ul><h3 id="def-start" tabindex="-1"><span class="text-warning">def</span> <code>start()</code> <a class="header-anchor" href="#def-start" aria-label="Permalink to &quot;&lt;span class=&#39;text-warning&#39;&gt;def&lt;/span&gt; \`start()\`&quot;">​</a></h3><p>Initialize the container and start the application. This command performs the following actions:</p><ol><li>Configures the dependency injection container</li><li>Retrieves the main application instance from the container</li><li>Runs the application</li><li>Displays a stylized startup banner using pyfiglet</li></ol><p>The application follows a dependency injection pattern where all required dependencies are resolved through the DIContainer.</p><hr></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("en/api/main.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const main = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  main as default
};
