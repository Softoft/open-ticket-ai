@startuml
skinparam class {
    BackgroundColor<<Entity>> #dddddd
    BackgroundColor<<Service>> #aaeeaa
    BackgroundColor<<File>> LightYellow
    BorderColor<<File>> DarkSlateGray
    FontColor<<File>> Black
}


class OTOBOApi <<Service>>{
    + getTickets(queueId: String): List<Ticket>
    + setTicketQueue(ticket: Ticket, queueId: String): void
    + setTicketPriority(ticket: Ticket, priority: String): void
}

class Ticket <<Entity>>{
    + id: String
    + title: String
    + notes: List<String>
    + queueId: String
    + priority: String
}

class TicketClassification<<Service>>{
    - queueModel: QueueModel
    - priorityModel: PriorityModel
    + classify(ticket: Ticket): void

}

class TicketClassifierWorker{
    - ticketClassification: TicketClassification
    - otoboApi: OTOBOApi
    + start(): void
}

package AI{
    class MyModel<<Entity>>{
        + model_name: str
        + ram_required: int
    }
    class MyTrainingArgs<<Entity>> {
        + epochs: int
        + eff_batchSize: int
        + learningRate: float
        + subject_importance: int
        + calculate_gradient_acc(available_ram: int): int
        + calculate_batch_size(available_ram: int): int
    }


    class DataPreparer<<Service>>{
        + prepareData(tickets: list[Ticket]): tuple[Dataset, Dataset]
    }

    class TicketClassifier{
        + train()
        + evaluate()
        + predict(ticket: Ticket): str
    }

    class TicketClassifiers<<Service>>{
        + trainClassifiers(): None
        + do_prediction(ticket: Ticket): Ticket
    }
    TicketClassifier --> DataPreparer
}

package TrainingData{
    class TicketData<<Entity>>{
        + id: String
        + subject: String
        + text: String
        + queueId: int
        + priority: int
        + timestamp: DateTime
    }
    class Ticket<<Entity>>{
        +history: List<TicketData>
   }

   class TrainingDataCollector<<Service>>{
       - getTickets(): List<TicketData>
       + getTrainingData(): List<Ticket>
       + createTrainingDataFile(): void
   }

}
class TrainingCSVData<<File>>

class ATC_CLI<<Service>>{
    + collect_training_data(): void
    + train(): void
    + startClassification(pollIntervalSeconds: int): void
}
TicketClassification o--> QueueModel
TicketClassification o--> PriorityModel

TicketClassification --> Ticket
OTOBOApi --> Ticket

TicketClassifierWorker --> TicketClassification
TicketClassifierWorker --> OTOBOApi

TrainingDataCollector --> TicketData
TrainingDataCollector --> TrainingData.Ticket
TrainingDataCollector --> TrainingCSVData: "create"
HyperparameterFinder --> TrainingCSVData: "read"
@enduml