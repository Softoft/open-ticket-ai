@startuml
skinparam componentStyle rectangle
allow_mixing

package Core {
  class ConfigManager
  class Orchestrator

  ' Injection Container / Registry
  class DIContainer{
    + register<T>(name: str, instance: T): void
    + resolve<T>(name: str): T
  }


}

package Integration {
  interface TicketAdapter {
  + fetch(...);
  + update(...)
  }
  class AdapterFactory
  class OTOBOAdapter
  class FreshdeskAdapter

  AdapterFactory --> TicketAdapter : builds
}

package DataFetchers {
  interface DataFetcher {
  + get_data(ticket): Map
  }

  class BaseTicket{
    + id: str
    + attrs: Map
  }

  class SimpleTicket extends BaseTicket {
    + subject: str
    + body: str
  }


  class SimpleTicketProvider implements DataFetcher {
    + get_data(filter): SimpleTicket
    + get_one_by(q_id: str): SimpleTicket
  }
}

package DataPreparers{
    interface BaseDataPreparer {
        + prepare(): Tokens
    }

    class SubjectBodyPreparer implements BaseDataPreparer

}

package "AI Models" {
  interface BaseAIModel {
    + predict(inputs): Any
   }

  class HuggingFaceModel implements BaseAIModel {
    + predict(inputs): str
  }

  class InferenceAPIModel implements BaseAIModel {
    + predict(inputs): str
  }

}

package Modifiers{

    interface Modifier {
        + modify(ticket_id: str, model_result: str | int): void
    }
    class TicketQueueModifier implements Modifier
    class TicketPriorityModifier implements Modifier

}

class AttributePredictor

AttributePredictor *-- "AI Models"
AttributePredictor *-- DataPreparers
AttributePredictor *-- Modifiers

DataPreparers *-- DataFetcher

DataFetcher .-down...> TicketAdapter : "uses"
Modifier .-right.> TicketAdapter : "uses"

Orchestrator *-- "n" AttributePredictor : "manages"

DIContainer --> ConfigManager : "provides"


"AI Models" ...> DIContainer : "registered in"

DataPreparers ...> DIContainer : "registered in"

@enduml
